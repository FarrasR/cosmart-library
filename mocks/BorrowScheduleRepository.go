// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	model "cosmart-library/entity/model"

	mock "github.com/stretchr/testify/mock"
)

// BorrowScheduleRepository is an autogenerated mock type for the BorrowScheduleRepository type
type BorrowScheduleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: schedule
func (_m *BorrowScheduleRepository) Create(schedule model.BorrowSchedule) (model.BorrowSchedule, error) {
	ret := _m.Called(schedule)

	var r0 model.BorrowSchedule
	if rf, ok := ret.Get(0).(func(model.BorrowSchedule) model.BorrowSchedule); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Get(0).(model.BorrowSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.BorrowSchedule) error); ok {
		r1 = rf(schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *BorrowScheduleRepository) FindOne(id int) (model.BorrowSchedule, error) {
	ret := _m.Called(id)

	var r0 model.BorrowSchedule
	if rf, ok := ret.Get(0).(func(int) model.BorrowSchedule); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.BorrowSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: schedule
func (_m *BorrowScheduleRepository) Update(schedule model.BorrowSchedule) (model.BorrowSchedule, error) {
	ret := _m.Called(schedule)

	var r0 model.BorrowSchedule
	if rf, ok := ret.Get(0).(func(model.BorrowSchedule) model.BorrowSchedule); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Get(0).(model.BorrowSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.BorrowSchedule) error); ok {
		r1 = rf(schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBorrowScheduleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBorrowScheduleRepository creates a new instance of BorrowScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBorrowScheduleRepository(t mockConstructorTestingTNewBorrowScheduleRepository) *BorrowScheduleRepository {
	mock := &BorrowScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
